{"version":3,"sources":["visualizer/sortingAlgorithms/algorithms.tsx","visualizer/visualizerComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["bubbleSort","arr","swapped","animation","i","length","step","bar1","bar2","swap","bars","temp","push","insertionSort","idx","j","selectionSort","min","z","gnomeSort","pos","shellSort","gap","Math","floor","setValue","quickSort","low","high","runQuickSort","p","index","pivot","partition","VisualizerComponent","props","updateResize","new_settings","state","settings","maxValue","round","window","innerHeight","setState","maxArraySize","innerWidth","resetArray","timeouts","clearTimeout","shift","resetBars","array","randomizeArray","isSorted","arraybars","document","getElementsByClassName","style","backgroundColor","barColor","runAlgorithm","algorithm","algorithmName","copy","new_stats","stats","steps","currentAlgorithm","currentStep","runAnimation","calcHeight","val","minValue","arraySize","activeBarColor","animationSpeed","this","addEventListener","newArray","random","prevBar1","prevBar2","setTimeout","forEach","barID","undefined","toString","list","pColor","className","map","key","id","height","marginTop","disabled","onClick","type","max","Number","MAX_SAFE_INTEGER","value","width","onChange","e","parseFloat","target","pattern","display","color","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5435e9f5.chunk.js","sourcesContent":["import {animationStep} from '../visualizerComponent'\r\n\r\n\r\n\r\n// -------------------------------------------------------------------------------------------\r\nexport function bubbleSort(arr : number[]){\r\n    var animation : animationStep [] = [];\r\n    let swapped;\r\n    do{\r\n        swapped = false;\r\n        for(let i = 0; i < arr.length-1; i++){\r\n            let step = {bar1 : i, bar2 : i+1 ,swap : 0, bars : [i,i+1]};\r\n            if(arr[i] > arr[i+1]){\r\n                step.swap = 1;\r\n                let temp = arr[i];\r\n                arr[i] = arr[i+1];\r\n                arr[i+1] = temp;\r\n                swapped = true;\r\n            }\r\n            animation.push(step);\r\n        }\r\n    }while(swapped)\r\n    \r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Insertion_sort\r\n// -------------------------------------------------------------------------------------------\r\nexport function insertionSort(arr:number[]){\r\n    var animation : animationStep [] = [];\r\n\r\n    let idx = 1;\r\n    while (idx < arr.length){\r\n        let j = idx;\r\n        let step = {bar1 : idx, bar2 : j ,swap : 0, bars : [idx,j]};\r\n        animation.push(step)\r\n        \r\n        while(j > 0 && arr[j-1] > arr[j]){\r\n            let temp = arr[j];\r\n            arr[j] = arr[j-1];\r\n            arr[j-1] = temp;\r\n            let step = {bar1 : j, bar2 : j-1 ,swap : 1, bars : [j,j-1]};\r\n            animation.push(step)\r\n            j--;\r\n        }\r\n        idx++;\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Selection_sort\r\n// -------------------------------------------------------------------------------------------\r\nexport function selectionSort(arr:number[]){\r\n    var animation : animationStep [] = [];\r\n\r\n    for(let i = 0; i < arr.length-1;i++){\r\n        let min = i;\r\n        for(let z = i +1; z < arr.length;z++){\r\n            if(arr[z] < arr[min])\r\n                min = z\r\n            let step = {bar1 : i, bar2 : z ,swap : 0, bars : [i,z]};\r\n            animation.push(step)\r\n        }\r\n        if(min !== i){\r\n            let temp = arr[min];\r\n            arr[min] = arr[i];\r\n            arr[i] = temp;\r\n            let step = {bar1 : min, bar2 : i ,swap : 1, bars : [i,min]};\r\n            animation.push(step)\r\n        }\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Gnome_sort\r\n// -------------------------------------------------------------------------------------------\r\nexport function gnomeSort (arr:number[]){\r\n    var animation : animationStep [] = [];\r\n    let pos = 0;\r\n    while (pos < arr.length){\r\n        let step = {bar1 : pos, bar2 : pos-1 ,swap : 0, bars : [pos,pos-1 >= 0 ? pos-1 : pos]};        \r\n        if (pos === 0 || arr[pos] >= arr[pos-1])\r\n            pos++;\r\n        else{\r\n            let temp = arr[pos];\r\n            arr[pos] = arr[pos-1];\r\n            arr[pos-1] = temp;\r\n            pos--;\r\n            step.swap = 1;\r\n        }\r\n        animation.push(step);\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//https://en.wikipedia.org/wiki/Shellsort\r\n// -------------------------------------------------------------------------------------------\r\nexport function shellSort(arr:number[]){\r\n    var animation : animationStep [] = [];\r\n    for(let gap = Math.floor(arr.length/2); gap > 0 ;){\r\n        for(let i = gap; i < arr.length;i++){\r\n        \r\n            let temp = arr[i]\r\n            let j\r\n            for( j = i; j >= gap && arr[j-gap] > temp ; j-=gap){\r\n                arr[j] = arr[j-gap];\r\n                let step = {bar1 : j, bar2 : j-gap,swap:0, setValue : arr[j-gap], bars : [j,j-gap]};        \r\n                animation.push(step)\r\n            }\r\n            arr[j] = temp;\r\n            let step = {bar1 : j, bar2 : i,swap:0, setValue : temp, bars : [j]};        \r\n            animation.push(step)\r\n        }\r\n        gap = Math.floor(gap/2);\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n//https://en.wikipedia.org/wiki/Quicksort\r\n// -------------------------------------------------------------------------------------------\r\nexport function quickSort(arr:number[],low :number, high :number){\r\n    var animation : animationStep [] = [];\r\n    runQuickSort(arr,low,high,animation)\r\n    return animation;\r\n}\r\n\r\nfunction runQuickSort(arr:number[],low :number, high :number,animation : animationStep[]){\r\n    if(low < high){\r\n        let p : number = partition(arr,low,high,animation);\r\n        runQuickSort(arr,low,p,animation);\r\n        runQuickSort(arr,p+1,high,animation); \r\n    }\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n\r\n//https://www.geeksforgeeks.org/hoares-vs-lomuto-partition-scheme-quicksort/\r\n//Using hoares\r\nfunction partition(arr:number[],low:number,high:number,animation:animationStep[]){\r\n    // let pivot = arr[low]; \r\n    let index = Math.floor(low + (high - low) / 2);\r\n    let pivot = arr[index];\r\n    let i = low - 1;\r\n    let j = high + 1;\r\n    while(true){\r\n        do{\r\n            let step = {bar1 : i, bar2 : j ,swap : 0, bars : [i,j,index]};\r\n            animation.push(step);\r\n            i++;\r\n        }while(arr[i] < pivot)\r\n\r\n        do{\r\n            let step = {bar1 : i, bar2 : j ,swap : 0, bars : [i,j,index]};\r\n            animation.push(step);        \r\n            j--;\r\n        }while(arr[j] > pivot)\r\n        \r\n\r\n        let step = {bar1 : i, bar2 : j ,swap : 0, bars : [i,j,index]};\r\n        if(i >= j){\r\n            animation.push(step);  \r\n            return j\r\n        }\r\n        let temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n        step.swap = 1;\r\n        animation.push(step);  \r\n        \r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------------------------------\r\n\r\n\r\n","import React from 'react';\r\nimport './visualizerComponent.css'\r\nimport {\r\n  bubbleSort, \r\n  insertionSort,\r\n  selectionSort,\r\n  gnomeSort,\r\n  shellSort,\r\n  quickSort\r\n} from './sortingAlgorithms/algorithms'\r\n\r\n\r\n\r\nexport interface Props{\r\n  \r\n}\r\n\r\ninterface settings {\r\n  maxValue: number;\r\n  minValue: number;\r\n  arraySize: number;\r\n  barColor: string;\r\n  activeBarColor: string;\r\n  backgroundColor : string;\r\n  animationSpeed: number\r\n}\r\n\r\ninterface algorithmStats{\r\n  steps: number;\r\n  currentStep: number;\r\n  currentAlgorithm : string;\r\n}\r\n\r\nexport interface animationStep{\r\n  bar1: number;\r\n  bar2: number;\r\n  bars: number[];\r\n  swap?: number;\r\n  setValue? : number;\r\n}\r\n\r\n\r\n\r\nexport default class VisualizerComponent extends React.Component<\r\n  {},  \r\n  {\r\n    array : number[],\r\n    timeouts : any[],\r\n    isSorted : boolean,\r\n    settings : settings,\r\n    stats : algorithmStats,\r\n    maxArraySize : number,\r\n  }>\r\n  \r\n  {\r\n    private animation : animationStep [] = [];\r\n\r\n    constructor(props:Props) {\r\n        super(props);\r\n        this.state = {\r\n          array : [],\r\n          timeouts : [],\r\n          isSorted : false,\r\n          maxArraySize : Math.round(window.innerWidth  / 6),\r\n          settings : {\r\n            maxValue : Math.round(window.innerHeight - 60),\r\n            minValue : 10,\r\n            arraySize: Math.round(window.innerWidth  / 8),\r\n            barColor: \"#0080ff\",\r\n            activeBarColor: \"#ff0000\",\r\n            backgroundColor: \"#282c34\",\r\n            animationSpeed: 1,\r\n          },\r\n          stats:{\r\n            steps: 0,\r\n            currentStep: 0,\r\n            currentAlgorithm: \"\",\r\n          }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.setState({array:this.randomizeArray()})\r\n      window.addEventListener('resize',this.updateResize)\r\n    }\r\n   \r\n\r\n    updateResize= () =>{\r\n      let new_settings = this.state.settings\r\n      new_settings.maxValue = Math.round(window.innerHeight - 60)\r\n      this.setState({maxArraySize : Math.round(window.innerWidth  / 6),settings:new_settings})\r\n    }\r\n\r\n\r\n    //Randomize the values in array\r\n    randomizeArray(){\r\n      let newArray : number[] = [];\r\n      for(let i = 0; i < this.state.settings.arraySize;i++){\r\n        newArray.push(Math.floor(Math.random() * (this.state.settings.maxValue - this.state.settings.minValue)) + this.state.settings.minValue)\r\n      }\r\n      return newArray\r\n    }\r\n  \r\n    resetArray = () => {\r\n      while(this.state.timeouts.length !== 0){\r\n        clearTimeout(this.state.timeouts[0])\r\n        this.state.timeouts.shift();\r\n      }\r\n      this.resetBars()\r\n      this.setState({array:this.randomizeArray(),isSorted:false})\r\n    }\r\n\r\n    resetBars = () => {\r\n      let arraybars = document.getElementsByClassName(\"array-bar\") as HTMLCollectionOf<HTMLElement>;\r\n      for(let i = 0; i < arraybars.length;i++){\r\n        arraybars[i].style.backgroundColor = this.state.settings.barColor;\r\n      }\r\n    }\r\n\r\n    runAlgorithm = (algorithm : (arr:number[]) => any, algorithmName : string) =>{\r\n      let copy = [...this.state.array]\r\n      if(this.state.timeouts.length === 0){\r\n        this.animation = algorithm(copy)\r\n        let new_stats = this.state.stats\r\n        new_stats.steps = this.animation.length\r\n        new_stats.currentAlgorithm = algorithmName\r\n        new_stats.currentStep = 0\r\n        this.runAnimation()\r\n        this.setState({isSorted:true,stats : new_stats})\r\n      }\r\n    }\r\n\r\n    runAnimation(){\r\n      let prevBar1 : number = -1;\r\n      let prevBar2 : number = -1;\r\n      let arraybars = document.getElementsByClassName(\"array-bar\") as HTMLCollectionOf<HTMLElement>;\r\n      for(let i = 0; i < this.animation.length;i++){\r\n        this.state.timeouts.push(setTimeout(()=>{\r\n          if(prevBar1 > -1 && prevBar1 < this.state.array.length) arraybars[prevBar1].style.backgroundColor = this.state.settings.barColor;\r\n          if(prevBar2 > -1 && prevBar2 < this.state.array.length) arraybars[prevBar2].style.backgroundColor = this.state.settings.barColor;\r\n          this.animation[i].bars.forEach((barID,idx) => {\r\n            if(barID < 0 || barID >= this.state.array.length || barID === undefined){\r\n              return;\r\n            }\r\n\r\n            if(idx === 2){\r\n              //Pivot\r\n              arraybars[barID].style.backgroundColor = \"rgb(\"+(255).toString()+\",255,255)\";\r\n            }else{\r\n              arraybars[barID].style.backgroundColor = this.state.settings.activeBarColor\r\n            }\r\n          });\r\n           \r\n          //Just set value\r\n          if(this.animation[i].setValue !== undefined && this.animation[i].setValue! >= 0){\r\n            let newArray = this.state.array\r\n            newArray[this.animation[i].bar1] = this.animation[i].setValue!\r\n            this.setState({array : newArray})\r\n          }else if(this.animation[i].swap === 1){ //Do swap\r\n            let newArray = this.state.array\r\n            let temp = newArray[this.animation[i].bar1]\r\n            newArray[this.animation[i].bar1] = newArray[this.animation[i].bar2]\r\n            newArray[this.animation[i].bar2] = temp\r\n            this.setState({array : newArray})\r\n          }\r\n          \r\n          prevBar1 = this.animation[i].bar1\r\n          prevBar2 = this.animation[i].bar2       \r\n\r\n          this.state.timeouts.shift();\r\n          let new_stats = this.state.stats\r\n          new_stats.currentStep++\r\n          this.setState({stats : new_stats})\r\n          if(this.state.timeouts.length <= 0){\r\n            this.setState({isSorted:true})\r\n          }\r\n        }, i * this.state.settings.animationSpeed))\r\n      }\r\n\r\n    }\r\n\r\n    calcHeight = (val : number) =>{\r\n      //16 px is the height of a button\r\n       return Math.round(window.innerHeight - val - 52) \r\n    }\r\n\r\n\r\n    render(){\r\n\r\n      var list : number[] = this.state.array;\r\n      const pColor : string = this.state.settings.barColor;\r\n      let copy = [...this.state.array]\r\n\r\n      return <div>\r\n        <div className = \"array-container\" \r\n          style={{\r\n            backgroundColor: `${this.state.settings.backgroundColor}`\r\n          }}>\r\n          {list.map((val,idx)=>(\r\n            <div\r\n              className = \"array-bar\"\r\n              key = {idx}\r\n              id = {idx.toString()}\r\n              style = {{\r\n                backgroundColor :`${pColor}`,\r\n                height : `${val}px`,\r\n                marginTop : `${this.calcHeight(val)}px`\r\n              }}></div>\r\n          ))}\r\n          </div>\r\n\r\n\r\n        <div className = \"button-container\">\r\n\r\n          <div className=\"dropup\">\r\n            <button className=\"dropbtn\">Algorithms ^</button>\r\n              <div className=\"dropup-content\">\r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      this.runAlgorithm(bubbleSort,\"Bubble Sort\")\r\n                  }}>Bubble Sort</button>\r\n                    \r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      this.runAlgorithm(insertionSort,\"Insertion Sort\")\r\n                  }}>Insertion Sort</button>\r\n\r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      this.runAlgorithm(selectionSort,\"Selection Sort\")\r\n                  }}>Selection Sort</button>\r\n\r\n                   <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      this.runAlgorithm(gnomeSort,\"Gnome Sort\")\r\n                  }}>Gnome Sort</button>\r\n\r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      this.runAlgorithm(shellSort,\"Shell Sort\")\r\n                  }}>Shell Sort</button>\r\n\r\n                   <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = quickSort(copy,0,copy.length-1)\r\n                        let new_stats = this.state.stats\r\n                        new_stats.steps = this.animation.length\r\n                        new_stats.currentAlgorithm = \"Quick Sort\"\r\n                        new_stats.currentStep = 0\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true,stats : new_stats})\r\n                      }\r\n                  }}>Quicksort</button>\r\n                \r\n              </div> {/*dropup-content*/}\r\n            </div> {/*Dropup*/}\r\n \r\n              {/* Settings */}\r\n            <div className=\"settings\">\r\n\r\n                  {/* Animation speed */}\r\n                  <div className=\"numberDivs\">\r\n                    <label >Delay Speed(MS): </label>\r\n                      <input \r\n                        type=\"number\" \r\n                        min = \".1\" \r\n                        max= {Number.MAX_SAFE_INTEGER }\r\n                        value={this.state.settings.animationSpeed} \r\n                        style= {{width:\"40px\"}}\r\n                        onChange = {(e)=>{\r\n                          let val = parseFloat(e.target.value) \r\n                          if(val > .1 && val <= Number.MAX_SAFE_INTEGER){\r\n                            let new_settings = this.state.settings\r\n                            new_settings.animationSpeed = val \r\n                            this.setState({settings: new_settings})\r\n                          }\r\n                        }}\r\n                      ></input>\r\n                  </div>\r\n\r\n                  {/* Array Size */}\r\n                  <div className=\"numberDivs\">\r\n                    <label >Array Size: </label>\r\n                      <input \r\n                        type=\"number\" \r\n                        min = \"1\" \r\n                        max= {this.state.maxArraySize.toString()}\r\n                        pattern =\".{0,3}\"\r\n                        value={this.state.settings.arraySize} \r\n                        style= {{width:\"40px\"}}\r\n                        onChange = {(e)=>{\r\n                          let value = parseFloat(e.target.value) \r\n                          if(value >= 1 && value <= this.state.maxArraySize){\r\n                            let new_settings = this.state.settings\r\n                            new_settings.arraySize = value\r\n                            this.setState({settings: new_settings})\r\n                            this.resetArray()\r\n                          }\r\n                        }}\r\n                      ></input>\r\n                  </div>\r\n\r\n\r\n                    {/* Bar colors */}\r\n                  <div id=\"colors\">\r\n                    <label>Bar colors: </label>\r\n                    <input \r\n                      type=\"color\" \r\n                      style={{display:\"block\"}}\r\n                      value = {this.state.settings.barColor}\r\n                      onChange = {(e)=>{\r\n                        let new_settings = this.state.settings\r\n                        new_settings.barColor = e.target.value      \r\n                        this.setState({settings: new_settings})                          \r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n\r\n                  {/* highlight color */}\r\n                  <div id=\"colors\">\r\n                    <label>Highlight Color: </label>\r\n                    <input \r\n                      type=\"color\" \r\n                      style={{display:\"block\"}}\r\n                      value = {this.state.settings.activeBarColor}\r\n                      onChange = {(e)=>{\r\n                        let new_settings = this.state.settings\r\n                        new_settings.activeBarColor = e.target.value      \r\n                        this.setState({settings: new_settings})                          \r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n\r\n                   {/* Background color */}\r\n                   <div id=\"colors\">\r\n                    <label>BG Color: </label>\r\n                    <input \r\n                      type=\"color\" \r\n                      style={{display:\"block\"}}\r\n                      value = {this.state.settings.backgroundColor}\r\n                      onChange = {(e)=>{\r\n                        let new_settings = this.state.settings\r\n                        new_settings.backgroundColor = e.target.value      \r\n                        this.setState({settings: new_settings})                          \r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n\r\n\r\n                 \r\n                \r\n                  <div className =\"statDiv\">\r\n                      <label className=\"stats\">Current Algorithm : <span style={{color:\"#32cd32\"}}>{this.state.stats.currentAlgorithm}</span></label>\r\n                      <label className=\"stats\" >Total Steps: {this.state.stats.steps}</label>\r\n                      <label className=\"stats\" >Current Steps: {this.state.stats.currentStep}</label>\r\n                  </div>\r\n\r\n                \r\n            </div>\r\n            \r\n            <button id=\"resetBtn\" onClick={this.resetArray}>Reset Array</button>\r\n          </div>{/* Button Container */} \r\n\r\n      </div>\r\n    }\r\n}","import React from 'react';\nimport VisualizerComponent from './visualizer/visualizerComponent'\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <VisualizerComponent> </VisualizerComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}