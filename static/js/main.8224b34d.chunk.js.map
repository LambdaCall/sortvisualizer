{"version":3,"sources":["visualizer/sortingAlgorithms/algorithms.tsx","visualizer/visualizerComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["quickSort","arr","low","high","animation","runQuickSort","p","index","Math","floor","pivot","i","j","step","bar1","bar2","swap","bars","push","temp","partition","VisualizerComponent","props","updateResize","new_settings","state","settings","maxValue","round","window","innerHeight","setState","maxArraySize","innerWidth","console","log","resetArray","timeouts","length","clearTimeout","shift","resetBars","array","randomizeArray","isSorted","arraybars","document","getElementsByClassName","style","backgroundColor","barColor","runAlgorithm","algorithm","copy","runAnimation","minValue","arraySize","activeBarColor","animationSpeed","stats","steps","currentStep","currentAlgorithm","this","addEventListener","newArray","random","prevBar1","prevBar2","setTimeout","forEach","barID","idx","undefined","toString","new_stats","list","pColor","className","map","val","key","id","height","fontSize","disabled","onClick","swapped","bubbleSort","insertionSort","min","z","selectionSort","pos","gnomeSort","type","max","value","width","onChange","e","parseFloat","target","pattern","display","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8224b34d.chunk.js","sourcesContent":["import {animationStep} from '../visualizerComponent'\r\n\r\n\r\n\r\n// -------------------------------------------------------------------------------------------\r\nexport function bubbleSort(arr : number[]){\r\n    var animation : animationStep [] = [];\r\n    let swapped;\r\n    do{\r\n        swapped = false;\r\n        for(let i = 0; i < arr.length-1; i++){\r\n            let step = {bar1 : i, bar2 : i+1 ,swap : 0, bars : [i,i+1]};\r\n            if(arr[i] > arr[i+1]){\r\n                step.swap = 1;\r\n                let temp = arr[i];\r\n                arr[i] = arr[i+1];\r\n                arr[i+1] = temp;\r\n                swapped = true;\r\n            }\r\n            animation.push(step);\r\n        }\r\n    }while(swapped)\r\n\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Insertion_sort\r\n// -------------------------------------------------------------------------------------------\r\nexport function insertionSort(arr:number[]){\r\n    var animation : animationStep [] = [];\r\n\r\n    let idx = 1;\r\n    while (idx < arr.length){\r\n        let j = idx;\r\n        while(j > 0 && arr[j-1] > arr[j]){\r\n            let temp = arr[j];\r\n            arr[j] = arr[j-1];\r\n            arr[j-1] = temp;\r\n            let step = {bar1 : j, bar2 : j-1 ,swap : 1, bars : [j,j-1]};\r\n            animation.push(step)\r\n            j--;\r\n        }\r\n        idx++;\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Selection_sort\r\n// -------------------------------------------------------------------------------------------\r\nexport function selectionSort(arr:number[]){\r\n    var animation : animationStep [] = [];\r\n\r\n    for(let i = 0; i < arr.length-1;i++){\r\n        let min = i;\r\n        for(let z = i +1; z < arr.length;z++){\r\n            if(arr[z] < arr[min])\r\n                min = z\r\n            let step = {bar1 : i, bar2 : z ,swap : 0, bars : [i,z]};\r\n            animation.push(step)\r\n        }\r\n        if(min !== i){\r\n            let temp = arr[min];\r\n            arr[min] = arr[i];\r\n            arr[i] = temp;\r\n            let step = {bar1 : min, bar2 : i ,swap : 1, bars : [i,min]};\r\n            animation.push(step)\r\n        }\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Gnome_sort\r\n// -------------------------------------------------------------------------------------------\r\nexport function gnomeSort (arr:number[]){\r\n    var animation : animationStep [] = [];\r\n    let pos = 0;\r\n    while (pos < arr.length){\r\n        let step = {bar1 : pos, bar2 : pos-1 ,swap : 0, bars : [pos,pos-1 >= 0 ? pos-1 : pos]};        \r\n        if (pos === 0 || arr[pos] >= arr[pos-1])\r\n            pos++;\r\n        else{\r\n            let temp = arr[pos];\r\n            arr[pos] = arr[pos-1];\r\n            arr[pos-1] = temp;\r\n            pos--;\r\n            step.swap = 1;\r\n        }\r\n        animation.push(step);\r\n    }\r\n    return animation;\r\n}\r\n// -------------------------------------------------------------------------------------------\r\n\r\n//https://en.wikipedia.org/wiki/Quicksort\r\n// -------------------------------------------------------------------------------------------\r\nexport function quickSort(arr:number[],low :number, high :number){\r\n    var animation : animationStep [] = [];\r\n    runQuickSort(arr,low,high,animation)\r\n    return animation;\r\n}\r\n\r\nfunction runQuickSort(arr:number[],low :number, high :number,animation : animationStep[]){\r\n    if(low < high){\r\n        let p : number = partition(arr,low,high,animation);\r\n        runQuickSort(arr,low,p,animation);\r\n        runQuickSort(arr,p+1,high,animation); \r\n    }\r\n}\r\n\r\n\r\n//https://www.geeksforgeeks.org/hoares-vs-lomuto-partition-scheme-quicksort/\r\n//Using hoares\r\nfunction partition(arr:number[],low:number,high:number,animation:animationStep[]){\r\n    // let pivot = arr[low]; \r\n    let index = Math.floor(low + (high - low) / 2);\r\n    let pivot = arr[index];\r\n    let i = low - 1;\r\n    let j = high + 1;\r\n    while(true){\r\n        do{\r\n            let step = {bar1 : i, bar2 : j ,swap : 0, bars : [i,j,index]};\r\n            animation.push(step);\r\n            i++;\r\n        }while(arr[i] < pivot)\r\n\r\n        do{\r\n            let step = {bar1 : i, bar2 : j ,swap : 0, bars : [i,j,index]};\r\n            animation.push(step);        \r\n            j--;\r\n        }while(arr[j] > pivot)\r\n        \r\n\r\n        let step = {bar1 : i, bar2 : j ,swap : 0, bars : [i,j,index]};\r\n        if(i >= j){\r\n            animation.push(step);  \r\n            return j\r\n        }\r\n        let temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n        step.swap = 1;\r\n        animation.push(step);  \r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n// -------------------------------------------------------------------------------------------\r\n\r\n\r\n","import React from 'react';\r\nimport './visualizerComponent.css'\r\nimport {\r\n  bubbleSort, \r\n  insertionSort,\r\n  selectionSort,\r\n  gnomeSort,\r\n  quickSort\r\n} from './sortingAlgorithms/algorithms'\r\n\r\n\r\n\r\nexport interface Props{\r\n  \r\n}\r\n\r\ninterface settings {\r\n  maxValue: number;\r\n  minValue: number;\r\n  arraySize: number;\r\n  barColor: string;\r\n  activeBarColor: string;\r\n  backgroundColor : string;\r\n  animationSpeed: number\r\n}\r\n\r\ninterface algorithmStats{\r\n  steps: number;\r\n  currentStep: number;\r\n  currentAlgorithm : string;\r\n}\r\n\r\nexport interface animationStep{\r\n  bar1: number;\r\n  bar2: number;\r\n  bars: number[];\r\n  swap: number;\r\n}\r\n\r\n\r\n\r\nexport default class VisualizerComponent extends React.Component<\r\n  {},  \r\n  {\r\n    array : number[],\r\n    timeouts : any[],\r\n    isSorted : boolean,\r\n    settings : settings,\r\n    stats : algorithmStats,\r\n    maxArraySize : number\r\n  }>\r\n  \r\n  {\r\n    private animation : animationStep [] = [];\r\n\r\n    constructor(props:Props) {\r\n        super(props);\r\n        this.state = {\r\n          array : [],\r\n          timeouts : [],\r\n          isSorted : false,\r\n          maxArraySize : Math.round(window.innerWidth  / 6),\r\n          settings : {\r\n            maxValue : Math.round(window.innerHeight - 30),\r\n            minValue : 25,\r\n            arraySize: Math.round(window.innerWidth  / 8),\r\n            barColor: \"#0080ff\",\r\n            activeBarColor: \"#ff0000\",\r\n            backgroundColor: \"#282c34\",\r\n            animationSpeed: 1,\r\n          },\r\n          stats:{\r\n            steps: 0,\r\n            currentStep: 0,\r\n            currentAlgorithm: \"\"\r\n          }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.setState({array:this.randomizeArray()})\r\n\r\n      window.addEventListener('resize',this.updateResize)\r\n    }\r\n   \r\n\r\n    updateResize= () =>{\r\n      let new_settings = this.state.settings\r\n      new_settings.maxValue = Math.round(window.innerHeight - 30)\r\n      this.setState({maxArraySize : Math.round(window.innerWidth  / 6),settings:new_settings})\r\n\r\n      console.log(this.state.maxArraySize,this.state.settings.maxValue)\r\n      console.log(\"resize\")\r\n    }\r\n\r\n\r\n    //Randomize the values in array\r\n    randomizeArray(){\r\n      let newArray : number[] = [];\r\n      for(let i = 0; i < this.state.settings.arraySize;i++){\r\n        newArray.push(Math.floor(Math.random() * (this.state.settings.maxValue - this.state.settings.minValue)) + this.state.settings.minValue)\r\n      }\r\n      return newArray\r\n    }\r\n  \r\n    resetArray = () => {\r\n      while(this.state.timeouts.length !== 0){\r\n        clearTimeout(this.state.timeouts[0])\r\n        this.state.timeouts.shift();\r\n      }\r\n      this.resetBars()\r\n      this.setState({array:this.randomizeArray(),isSorted:false})\r\n    }\r\n\r\n    resetBars = () => {\r\n      let arraybars = document.getElementsByClassName(\"array-bar\") as HTMLCollectionOf<HTMLElement>;\r\n      for(let i = 0; i < arraybars.length;i++){\r\n        arraybars[i].style.backgroundColor = this.state.settings.barColor;\r\n      }\r\n    }\r\n\r\n    runAlgorithm = (algorithm : (arr:number[]) => any) =>{\r\n      if(this.state.timeouts.length === 0){\r\n        let copy = [...this.state.array]\r\n        this.animation = algorithm(copy)\r\n        this.runAnimation()\r\n        this.setState({isSorted:true})\r\n      }\r\n    }\r\n\r\n    runAnimation(){\r\n      let prevBar1 : number = -1;\r\n      let prevBar2 : number = -1;\r\n      let arraybars = document.getElementsByClassName(\"array-bar\") as HTMLCollectionOf<HTMLElement>;\r\n      for(let i = 0; i < this.animation.length;i++){\r\n        this.state.timeouts.push(setTimeout(()=>{\r\n          if(prevBar1 > -1 && prevBar1 < this.state.array.length) arraybars[prevBar1].style.backgroundColor = this.state.settings.barColor;\r\n          if(prevBar2 > -1 && prevBar2 < this.state.array.length) arraybars[prevBar2].style.backgroundColor = this.state.settings.barColor;\r\n          this.animation[i].bars.forEach((barID,idx) => {\r\n            if(barID < 0 || barID >= this.state.array.length || barID === undefined){\r\n              return;\r\n            }\r\n\r\n            if(idx === 2){\r\n              //Pivot\r\n              arraybars[barID].style.backgroundColor = \"rgb(\"+(255).toString()+\",255,255)\";\r\n            }else{\r\n              arraybars[barID].style.backgroundColor = this.state.settings.activeBarColor\r\n            }\r\n          });\r\n           \r\n          if(this.animation[i].swap === 1){\r\n\r\n            let newArray = this.state.array\r\n            let temp = newArray[this.animation[i].bar1]\r\n            newArray[this.animation[i].bar1] = newArray[this.animation[i].bar2]\r\n            newArray[this.animation[i].bar2] = temp\r\n           \r\n            this.setState({array : newArray})\r\n          }\r\n          \r\n          prevBar1 = this.animation[i].bar1\r\n          prevBar2 = this.animation[i].bar2       \r\n\r\n          this.state.timeouts.shift();\r\n          let new_stats = this.state.stats\r\n          new_stats.currentStep++\r\n          this.setState({stats : new_stats})\r\n          if(this.state.timeouts.length <= 0){\r\n            this.setState({isSorted:true})\r\n          }\r\n        }, i * this.state.settings.animationSpeed))\r\n      }\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n      var list : number[] = this.state.array;\r\n      const pColor : string = this.state.settings.barColor;\r\n      let copy = [...this.state.array]\r\n\r\n      return <div>\r\n        <div className = \"array-container\" \r\n        style={{backgroundColor: `${this.state.settings.backgroundColor}`}}>\r\n          {list.map((val,idx)=>(\r\n            <div\r\n              className = \"array-bar\"\r\n              key = {idx}\r\n              id = {idx.toString()}\r\n              style = {{\r\n                backgroundColor :`${pColor}`,\r\n                height : `${val}px`\r\n              }}></div>\r\n          ))}\r\n          </div>\r\n\r\n\r\n        <div className = \"button-container\">\r\n\r\n          <div className=\"dropup\">\r\n            <button className=\"dropbtn\">Algorithms <span style={{fontSize:\"16px\"}}>^</span></button>\r\n              <div className=\"dropup-content\">\r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = bubbleSort(copy)\r\n                        let new_stats = this.state.stats\r\n                        new_stats.steps = this.animation.length\r\n                        new_stats.currentAlgorithm = \"Bubble Sort\"\r\n                        new_stats.currentStep = 0\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true,stats : new_stats})\r\n                      }\r\n                  }}>Bubble Sort</button>\r\n                    \r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = insertionSort(copy)\r\n                        let new_stats = this.state.stats\r\n                        new_stats.steps = this.animation.length\r\n                        new_stats.currentAlgorithm = \"Insertion Sort\"\r\n                        new_stats.currentStep = 0\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true,stats : new_stats})\r\n                      }\r\n                  }}>Insertion Sort</button>\r\n\r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = selectionSort(copy)\r\n                        let new_stats = this.state.stats\r\n                        new_stats.steps = this.animation.length\r\n                        new_stats.currentAlgorithm = \"Selection Sort\"\r\n                        new_stats.currentStep = 0\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true,stats : new_stats})\r\n                      }\r\n                  }}>Selection Sort</button>\r\n\r\n                   <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = gnomeSort(copy)\r\n                        let new_stats = this.state.stats\r\n                        new_stats.steps = this.animation.length\r\n                        new_stats.currentAlgorithm = \"Gnome Sort\"\r\n                        new_stats.currentStep = 0\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true,stats : new_stats})\r\n                      }\r\n                  }}>Gnome Sort</button>\r\n\r\n                   <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = quickSort(copy,0,copy.length-1)\r\n                        let new_stats = this.state.stats\r\n                        new_stats.steps = this.animation.length\r\n                        new_stats.currentAlgorithm = \"Quick Sort\"\r\n                        new_stats.currentStep = 0\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true,stats : new_stats})\r\n                      }\r\n                  }}>Quicksort</button>\r\n                \r\n              </div> {/*dropup-content*/}\r\n            </div> {/*Dropup*/}\r\n \r\n              {/* Settings */}\r\n            <div className=\"settings\">\r\n\r\n                  {/* Animation speed */}\r\n                  <div className=\"numberDivs\">\r\n                    <label >Delay Speed: </label>\r\n                      <input \r\n                        type=\"number\" \r\n                        min = \".1\" \r\n                        max=\"100\" \r\n                        value={this.state.settings.animationSpeed} \r\n                        style= {{width:\"40px\"}}\r\n                        onChange = {(e)=>{\r\n                          let val = parseFloat(e.target.value) \r\n                          if(val > .1 && val <= 100){\r\n                            let new_settings = this.state.settings\r\n                            new_settings.animationSpeed = val \r\n                            this.setState({settings: new_settings})\r\n                          }\r\n                        }}\r\n                      ></input>\r\n                  </div>\r\n\r\n                  {/* Array Size */}\r\n                  <div className=\"numberDivs\">\r\n                    <label >Array Size: </label>\r\n                      <input \r\n                        type=\"number\" \r\n                        min = \"1\" \r\n                        max= {this.state.maxArraySize.toString()}\r\n                        pattern =\".{0,3}\"\r\n                        value={this.state.settings.arraySize} \r\n                        style= {{width:\"40px\"}}\r\n                        onChange = {(e)=>{\r\n                          let value = parseFloat(e.target.value) \r\n                          if(value >= 1 && value <= this.state.maxArraySize){\r\n                            let new_settings = this.state.settings\r\n                            new_settings.arraySize = value\r\n                            this.setState({settings: new_settings})\r\n                            this.resetArray()\r\n                          }\r\n                        }}\r\n                      ></input>\r\n                  </div>\r\n\r\n\r\n                    {/* Bar colors */}\r\n                  <div id=\"colors\">\r\n                    <label>Bar colors: </label>\r\n                    <input \r\n                      type=\"color\" \r\n                      style={{display:\"block\"}}\r\n                      value = {this.state.settings.barColor}\r\n                      onChange = {(e)=>{\r\n                        let new_settings = this.state.settings\r\n                        new_settings.barColor = e.target.value      \r\n                        this.setState({settings: new_settings})                          \r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n\r\n                  {/* highlight color */}\r\n                  <div id=\"colors\">\r\n                    <label>Highlight Color: </label>\r\n                    <input \r\n                      type=\"color\" \r\n                      style={{display:\"block\"}}\r\n                      value = {this.state.settings.activeBarColor}\r\n                      onChange = {(e)=>{\r\n                        let new_settings = this.state.settings\r\n                        new_settings.activeBarColor = e.target.value      \r\n                        this.setState({settings: new_settings})                          \r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n\r\n                   {/* Background color */}\r\n                   <div id=\"colors\">\r\n                    <label>BG Color: </label>\r\n                    <input \r\n                      type=\"color\" \r\n                      style={{display:\"block\"}}\r\n                      value = {this.state.settings.backgroundColor}\r\n                      onChange = {(e)=>{\r\n                        let new_settings = this.state.settings\r\n                        new_settings.backgroundColor = e.target.value      \r\n                        this.setState({settings: new_settings})                          \r\n                      }}\r\n                    ></input>\r\n                  </div>\r\n\r\n\r\n                  <div>\r\n                      \r\n                      <label className=\"stats\" >Current Algorithm: {this.state.stats.currentAlgorithm}</label>\r\n                      <label className=\"stats\" >Total Steps: {this.state.stats.steps}</label>\r\n                      <label className=\"stats\" >Current Step: {this.state.stats.currentStep}</label>\r\n\r\n                  </div>\r\n\r\n\r\n            </div>\r\n            \r\n            <button id=\"resetBtn\" onClick={this.resetArray}>Reset Array</button>\r\n          </div>{/* Button Container */} \r\n\r\n      </div>\r\n    }\r\n}","import React from 'react';\nimport VisualizerComponent from './visualizer/visualizerComponent'\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <VisualizerComponent> </VisualizerComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}