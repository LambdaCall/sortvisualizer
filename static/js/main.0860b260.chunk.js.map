{"version":3,"sources":["visualizer/visualizerComponent.tsx","visualizer/sortingAlgorithms/algorithms.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["VisualizerComponent","props","settings","maxValue","minValue","arraySize","barColor","activeBarColor","animationSpeed","animation","resetArray","state","timeouts","length","clearTimeout","shift","resetBars","setState","array","randomizeArray","isSorted","arraybars","document","getElementsByClassName","i","style","backgroundColor","runAlgorithm","algorithm","copy","runAnimation","newArray","this","push","Math","floor","random","prevBar1","prevBar2","setTimeout","bar1","bar2","swap","temp","list","pColor","className","map","val","idx","key","id","toString","height","disabled","onClick","arr","swapped","step","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0860b260.chunk.js","sourcesContent":["import React from 'react';\r\nimport './visualizerComponent.css'\r\nimport {bubbleSort} from './sortingAlgorithms/algorithms'\r\n\r\n\r\nexport interface Props{\r\n  \r\n}\r\n\r\ninterface settings {\r\n  maxValue: number;\r\n  minValue: number;\r\n  arraySize: number;\r\n  barColor: string;\r\n  activeBarColor: string;\r\n  animationSpeed: number\r\n}\r\n\r\nexport interface animationStep{\r\n  bar1: number;\r\n  bar2: number;\r\n  swap: number;\r\n}\r\n\r\n\r\n\r\nexport default class VisualizerComponent extends React.Component<{},{array : number[],timeouts : any[],isSorted : boolean}>{\r\n\r\n    private settings : settings = {\r\n      maxValue : 900,\r\n      minValue : 15,\r\n      arraySize: 200,\r\n      barColor: \"green\",\r\n      activeBarColor: \"red\",\r\n      animationSpeed: .05,\r\n    }\r\n    \r\n  \r\n\r\n    private animation : animationStep [] = [];\r\n\r\n    constructor(props:Props) {\r\n        super(props);\r\n        this.state = {\r\n          array : this.randomizeArray(),\r\n          timeouts : [],\r\n          isSorted : false\r\n        }\r\n    }\r\n      \r\n\r\n    //Randomize the values in array\r\n    randomizeArray(){\r\n      let newArray : number[] = [];\r\n      for(let i = 0; i < this.settings.arraySize;i++){\r\n        newArray.push(Math.floor(Math.random() * (this.settings.maxValue - this.settings.minValue)) + this.settings.minValue)\r\n      }\r\n      return newArray\r\n    }\r\n  \r\n    resetArray = () => {\r\n      while(this.state.timeouts.length !== 0){\r\n        clearTimeout(this.state.timeouts[0])\r\n        this.state.timeouts.shift();\r\n      }\r\n      this.resetBars()\r\n      this.setState({array:this.randomizeArray(),isSorted:false})\r\n    }\r\n\r\n    resetBars = () => {\r\n      let arraybars = document.getElementsByClassName(\"array-bar\") as HTMLCollectionOf<HTMLElement>;\r\n      for(let i = 0; i < arraybars.length;i++){\r\n        arraybars[i].style.backgroundColor = this.settings.barColor;\r\n      }\r\n    }\r\n\r\n    runAlgorithm = (algorithm : (arr:number[]) => any) =>{\r\n      if(this.state.timeouts.length === 0){\r\n        let copy = [...this.state.array]\r\n        this.animation = algorithm(copy)\r\n        this.runAnimation()\r\n        this.setState({isSorted:true})\r\n      }\r\n    }\r\n\r\n    runAnimation(){\r\n      let prevBar1 : number = -1;\r\n      let prevBar2 : number = -1;\r\n      let arraybars = document.getElementsByClassName(\"array-bar\") as HTMLCollectionOf<HTMLElement>;\r\n      for(let i = 0; i < this.animation.length;i++){\r\n        this.state.timeouts.push(setTimeout(()=>{\r\n          if(prevBar1 > -1) arraybars[prevBar1].style.backgroundColor = this.settings.barColor;\r\n          if(prevBar2 > -1) arraybars[prevBar2].style.backgroundColor = this.settings.barColor;\r\n          arraybars[this.animation[i].bar1].style.backgroundColor = this.settings.activeBarColor\r\n          arraybars[this.animation[i].bar2].style.backgroundColor = this.settings.activeBarColor          \r\n          \r\n          if(this.animation[i].swap === 1){\r\n\r\n            let newArray = this.state.array\r\n            let temp = newArray[this.animation[i].bar1]\r\n            newArray[this.animation[i].bar1] = newArray[this.animation[i].bar2]\r\n            newArray[this.animation[i].bar2] = temp\r\n           \r\n            this.setState({array : newArray})\r\n          }\r\n          \r\n          prevBar1 = this.animation[i].bar1\r\n          prevBar2 = this.animation[i].bar2          \r\n          this.state.timeouts.shift();\r\n          if(this.state.timeouts.length <= 0){\r\n            this.setState({isSorted:true})\r\n          }\r\n        }, i * this.settings.animationSpeed))\r\n      }\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n      var list : number[] = this.state.array;\r\n      const pColor : string = this.settings.barColor;\r\n      let copy = [...this.state.array]\r\n\r\n      return <div>\r\n        <div className = \"array-container\">\r\n          {list.map((val,idx)=>(\r\n            <div\r\n              className = \"array-bar\"\r\n              key = {idx}\r\n              id = {idx.toString()}\r\n              style = {{\r\n                backgroundColor :`${pColor}`,\r\n                height : `${val}px`\r\n              }}></div>\r\n          ))}\r\n          </div>\r\n\r\n\r\n        <div className = \"button-container\">\r\n\r\n          <div className=\"dropup\">\r\n            <button className=\"dropbtn\">Algorithms</button>\r\n              <div className=\"dropup-content\">\r\n                  <button \r\n                    disabled = {this.state.isSorted} \r\n                    className=\"buttons\" \r\n                    onClick={() => {\r\n                      if(this.state.timeouts.length === 0){\r\n                        this.animation = bubbleSort(copy)\r\n                        this.runAnimation()\r\n                        this.setState({isSorted:true})\r\n                      }\r\n                  }}>Bubble Sort</button>\r\n                \r\n              </div> {/*dropup-content*/}\r\n            </div> {/*Dropup*/}\r\n\r\n\r\n            \r\n            <button id=\"resetBtn\" onClick={this.resetArray}>Reset </button>\r\n          </div>{/* Button Container */} \r\n\r\n      </div>\r\n    }\r\n}","import {animationStep} from '../visualizerComponent'\r\n\r\n\r\n\r\nexport function bubbleSort(arr : number[]){\r\n    var animation : animationStep [] = [];\r\n\r\n    let swapped;\r\n    do{\r\n        swapped = false;\r\n        for(let i = 0; i < arr.length-1; i++){\r\n            let step = {bar1 : i, bar2 : i+1 ,swap : 0};\r\n            if(arr[i] > arr[i+1]){\r\n                step.swap = 1;\r\n                let temp = arr[i];\r\n                arr[i] = arr[i+1];\r\n                arr[i+1] = temp;\r\n                swapped = true;\r\n            }\r\n            animation.push(step);\r\n        }\r\n    }while(swapped)\r\n\r\n    return animation;\r\n}\r\n\r\n\r\n","import React from 'react';\nimport VisualizerComponent from './visualizer/visualizerComponent'\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <VisualizerComponent> </VisualizerComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}